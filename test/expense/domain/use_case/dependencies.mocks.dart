// Mocks generated by Mockito 5.4.4 from annotations
// in expense_tracker/test/expense/domain/use_case/dependencies.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i3;

import 'package:dartz/dartz.dart' as _i2;
import 'package:expense_tracker/core/failures/expense_failures.dart' as _i7;
import 'package:expense_tracker/features/expense_tracking/domain/entity/expense.dart'
    as _i8;
import 'package:expense_tracker/features/expense_tracking/domain/entity/expense_category.dart'
    as _i4;
import 'package:expense_tracker/features/expense_tracking/domain/repository/expense_repository_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_1 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExpenseCategory_2 extends _i1.SmartFake
    implements _i4.ExpenseCategory {
  _FakeExpenseCategory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExpenseRepositoryInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepositoryInterface extends _i1.Mock
    implements _i5.ExpenseRepositoryInterface {
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Expense>>> getAllExpenses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.Expense>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.Expense>>(
          this,
          Invocation.method(
            #getAllExpenses,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.Expense>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.Expense>>(
          this,
          Invocation.method(
            #getAllExpenses,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Expense>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i4.ExpenseCategory>>>
      getAllCategory() => (super.noSuchMethod(
            Invocation.method(
              #getAllCategory,
              [],
            ),
            returnValue: _i6.Future<
                    _i2.Either<_i7.Failure, List<_i4.ExpenseCategory>>>.value(
                _FakeEither_0<_i7.Failure, List<_i4.ExpenseCategory>>(
              this,
              Invocation.method(
                #getAllCategory,
                [],
              ),
            )),
            returnValueForMissingStub: _i6.Future<
                    _i2.Either<_i7.Failure, List<_i4.ExpenseCategory>>>.value(
                _FakeEither_0<_i7.Failure, List<_i4.ExpenseCategory>>(
              this,
              Invocation.method(
                #getAllCategory,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i4.ExpenseCategory>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>> createNewExpense(
          _i8.Expense? expense) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewExpense,
          [expense],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>.value(
            _FakeEither_0<_i7.Failure, _i8.Expense>(
          this,
          Invocation.method(
            #createNewExpense,
            [expense],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>.value(
                _FakeEither_0<_i7.Failure, _i8.Expense>(
          this,
          Invocation.method(
            #createNewExpense,
            [expense],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> deleteExpense(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deleteExpense,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, void>>.value(
                _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deleteExpense,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>> editExpense(
          _i8.Expense? expense) =>
      (super.noSuchMethod(
        Invocation.method(
          #editExpense,
          [expense],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>.value(
            _FakeEither_0<_i7.Failure, _i8.Expense>(
          this,
          Invocation.method(
            #editExpense,
            [expense],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>.value(
                _FakeEither_0<_i7.Failure, _i8.Expense>(
          this,
          Invocation.method(
            #editExpense,
            [expense],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.Expense>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i4.ExpenseCategory>> createNewCategory(
          _i4.ExpenseCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewCategory,
          [category],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, _i4.ExpenseCategory>>.value(
                _FakeEither_0<_i7.Failure, _i4.ExpenseCategory>(
          this,
          Invocation.method(
            #createNewCategory,
            [category],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.Either<_i7.Failure, _i4.ExpenseCategory>>.value(
                _FakeEither_0<_i7.Failure, _i4.ExpenseCategory>(
          this,
          Invocation.method(
            #createNewCategory,
            [category],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i4.ExpenseCategory>>);
}

/// A class which mocks [ExpenseCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseCategory extends _i1.Mock implements _i4.ExpenseCategory {
  MockExpenseCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  _i3.Color get color => (super.noSuchMethod(
        Invocation.getter(#color),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#color),
        ),
      ) as _i3.Color);

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Expense].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpense extends _i1.Mock implements _i8.Expense {
  MockExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  int get money => (super.noSuchMethod(
        Invocation.getter(#money),
        returnValue: 0,
      ) as int);

  @override
  _i4.ExpenseCategory get category => (super.noSuchMethod(
        Invocation.getter(#category),
        returnValue: _FakeExpenseCategory_2(
          this,
          Invocation.getter(#category),
        ),
      ) as _i4.ExpenseCategory);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
